//FILE VERSION 1.0 
//INCLUDES PUMP OUTPUT MAPPED FROM PROFILE (IN AUTO MODE)
//                     MAPPED FROM POT (in manual mode)
//THIS DOES NOT INCLUDE ANY MONITORING OF ACTUAL PRESSURE

#include "brewProfiles.h"
// IO PINS
//0 Serial Rx
//1 Serial TX
const int buttonPin = 2;   
const int okPin = 3;
const int inletRelay = 4;
const int heaterRelay = 5;
const int groupHeadValve = 6; //Pressure relief
//7 spare Relay
const int floatSwitch = 8;  
const int pumpPWM = 9;  
//10 spare
//11 spare
const int groupButton = 12;
//13 onboard LED but otherwise spare
const int boilerTempProbe = A0;
// 15/A1 
// 16/A2
// 17/A3
// 18/A4
const int pressurePot = A5;

//Working Parameters
byte maxMenuitem; //will be worked out in setup
const int boilerTempMin=198;
const int boilerTempMax=202;

// Store last time buttons were down
unsigned long lastButtonPress = 0;    
unsigned long lastGroupPress=0;

int menuitem=0;

//Vars used to follow during brew
// BREWS is defined in brewProfiles.h
const brewProfile* activeBrew=NULL;
  // 255 no brewing going on
  // 254 Currently brewing in muanual mode
  // 0-253 Currently using auto using brewProfile 


void setup() {
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(okPin, INPUT_PULLUP);
  pinMode(groupButton, INPUT_PULLUP);

  Serial.begin(9600);
  showMenuItem();
  //calculate size of menu based on how many brewProfiles there are.
  maxMenuitem=1 + sizeof(BREWS) / sizeof(brewProfile);
}

void loop()
{
unsigned long t=millis();
bool buttonPress=digitalRead(buttonPin);
bool groupPress=digitalRead(groupButton);

//ignore button press if it's within .4 of a second since the last one
if ( (buttonPress==LOW) && ( (t-lastButtonPress) >400 ) )
    {
      menuitem++;
      if(menuitem > maxMenuitem)
        menuitem=1;
      showMenuItem();
      lastGroupPress=t;  
    }

if( (groupPress==LOW) && ( ( menuitem > 0) ) )
  {lastGroupPress=t;
  switch(menuitem)
    {case 1:
       manualBrew();
       break;   

     default:
       autoBrew(menuitem-2);
       break;

    }//end of switch
  }// end of if OK pressed
  
//if neither key has been pressed for 10 seconds go back to "ready"
if ( ((t-lastGroupPress)>10000) && ( t-lastButtonPress ) > 10000 && (menuitem != 0))   
  {
  menuitem=0;
  showMenuItem();
  }
  
}//end of loop

//This item just tells the user where they are in the menu system
void showMenuItem()
{
switch( menuitem )
  {
    case 0:
    Serial.print( "Ready" );
    break;
   case 1:
      Serial.println( "Manual Mode" );
      break;

   default:
      Serial.println( BREWS[menuitem-2].name );
  } 
}


void autoBrew(int brewNo)
{ 
int n;
activeBrew = &BREWS[brewNo];
int stepCount = activeBrew->stepCount;
//make Sure grouphead valve is closed
//RELAY IS ACTIVE LOW BUT VALVE IS WIRED
//TO NC SWITCH
digitalWrite(groupHeadValve, LOW);
Serial.print("Dispensing ");
Serial.println(activeBrew -> name );
for(n=0;n< stepCount ;n++)
 {
  //exit loop if groupButton is released 
  if (digitalRead(groupButton)==HIGH)
    break;   
   Serial.println("Pressure ");
  Serial.println(activeBrew ->steps[n].pressure,DEC);
  delay(activeBrew->steps[n].duration * 100);
  //This is crude.
  //we should be looking up the value to send
  //ALSO there should be monitoring of the pressure
  int motorValue = map(activeBrew -> steps[n].pressure, 0, 92, 0, 255);
  analogWrite(pumpPWM, motorValue);
 }
 
activeBrew=NULL;
Serial.println("Enjoy!");
analogWrite(pumpPWM,0);
showMenuItem();
delay(100);//allow debounce of groupButton
lastGroupPress=millis();
//make Sure grouphead valve is closed
digitalWrite(groupHeadValve, HIGH);
}

void manualBrew()
{
//make Sure grouphead valve is closed
//RELAY IS ACTIVE LOW BUT VALVE IS WIRED
//TO NC SWITCH
digitalWrite(groupHeadValve, LOW);

Serial.print("Dispensing");
while(digitalRead(groupButton)==LOW)
  {
  int potValue=analogRead(pressurePot);
  int motorValue=map (potValue,0,1023, 0,255); 
   //This is very crude  (see autobrew) 
  analogWrite(pumpPWM, motorValue);
  Serial.print(".");
   delay(200);
  }

Serial.println("");
showMenuItem(); 
analogWrite(pumpPWM, 0);
delay(100);//allow debounce of groupButton
lastGroupPress=millis();
//make Sure grouphead valve is open again
digitalWrite(groupHeadValve, HIGH);
}
